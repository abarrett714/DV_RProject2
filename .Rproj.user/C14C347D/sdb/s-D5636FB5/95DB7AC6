{
    "contents" : "require(tidyr)\nrequire(dplyr)\nrequire(ggplot2)\n\ntbl_df(diamonds)\nView(diamonds)\n\n# select\nselect(diamonds, cut, clarity) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds;\ndiamonds %>% select(cut, clarity) %>% tbl_df\ndiamonds %>% select(., cut, clarity) %>% tbl_df\ndiamonds %>% select(color:price) %>% tbl_df # Equivalent SQL: none\ndiamonds %>% select(-cut, -clarity) %>% tbl_df # Equivalent SQL: none\nx <- diamonds %>% select(cut, clarity) %>% tbl_df\nx\n\n# filter\ndiamonds %>% select(cut, clarity) %>% filter(cut == \"Good\") %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut = 'Good';\ndiamonds %>% select(cut, clarity) %>% filter(cut %in% c(\"Good\", \"Fair\")) %>% tbl_df # Equivalent SQL: select cut, clarity from diamonds where cut in ('Good', 'Fair');# or Equivalent SQL:  select cut, clarity from diamonds where cut = 'Good' or cut = 'Fair';\ndiamonds %>% select(cut, clarity) %>% filter(cut %in% c(\"Good\", \"Fair\"), clarity == \"VS1\") %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where (cut = 'Good' or cut = 'Fair') and clarity = 'VS1';\ndiamonds %>% select(cut, clarity) %>% filter(cut %in% c(\"Good\", \"Fair\"), clarity == \"VS1\" | is.na(cut)) %>% tbl_df # Equivalent SQL:  select cut, clarity from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null;\n# diamonds %>% select(cut, clarity) %>% filter(carat > 2) %>% tbl_df # This will give an error\n# Equivalent SQL:  select cut, clarity  from diamonds  where carat > 2;\ndiamonds %>% filter(carat > 2) %>% select(cut, clarity) %>% tbl_df # This does not give an error.\ndiamonds %>% select(carat, clarity) %>% filter(carat > 2) %>% tbl_df # Equivalent SQL:  select carat, clarity  from diamonds  where carat > 2;\n\n# arrange\ndata.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x)) %>% tbl_df\ndata.frame(x=c(1,1,1,2,2), y=c(5:1), z=(1:5)) %>% arrange(desc(x), y) %>% tbl_df\ndiamonds %>% arrange(carat) %>% tbl_df # Equivalent SQL:  select * from diamonds order by carat;\ndiamonds %>% arrange(desc(carat)) %>% tbl_df # Equivalent SQL:select * from diamonds order by carat desc;\n\n# rename\ndiamonds %>% rename(tbl= table) %>% tbl_df # Equivalent: select tbl as \"table\" from diamonds;\n\n# mutate\ndiamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c(\"Good\", \"Fair\"), clarity == \"VS1\" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df # Equivalent: select cut, clarity, x+y+z as sum from diamonds where ((cut = 'Good' or cut = 'Fair') and clarity = 'VS1') or cut is null\nndf <- diamonds %>% select(cut, clarity, x, y, z) %>% filter(cut %in% c(\"Good\", \"Fair\"), clarity == \"VS1\" | is.na(cut)) %>% mutate(sum = x+y+z) %>% tbl_df\nndf\n\n# Useful mutate functions:\n    # diamonds$ID<-seq.int(nrow(diamonds)) # Add a sequince number column\n    # pmin(), pmax() Parallel, Element-wise min and max\n    # cummin(), cummax() Cumulative min and max\n    # cumsum(), cumprod() Cumulative sum and product\n  # Windowing functions\n    # between() Are values between a and b?\n    # cume_dist() Cumulative distribution of values\n    # cumall(), cumany() Cumulative all and any\n    # cummean() Cumulative mean\n    # lead(), lag() Copy with values one position\n    # ntile() Bin vector into n buckets\n    # dense_rank(), min_rank(),\n    # percent_rank(), row_number() Various ranking methods\n\npmin(c(1:5), (5:1)) # Pairwise min\ndiamonds %>% mutate(minxy = pmin(x,y)) %>% tbl_df\npmax(c(1:5), (5:1)) # Pairwise max\nc(1,1,2,0,4,3,5) %>% cummin()\ndiamonds %>% mutate(cummin_x = cummin(x)) %>% tbl_df\nc(1,1,2,5,4,3,5) %>% cummax()\nc(1,1,2,3,4,3,5) %>% cumsum()\ndiamonds %>% mutate(cumsum_x = cumsum(x)) %>% tbl_df\nc(1,1,2,3,4,3,5) %>% cumprod()\nc(1,1,2,3,4,3,5) %>% between(2,4)\ndiamonds %>% mutate(between_x = between(x,4,4.1)) %>% tbl_df\nc(1:5) %>% cummean()\nc(1:5) %>% lead() - c(1:5)\ndiamonds %>% mutate(lead_z = lead(z)-z) %>% tbl_df\nc(1:5) %>% lag() - c(1:5)\ndiamonds %>% mutate(lag_z = lag(z)-z) %>% tbl_df\nc(1:10)\nc(1:10) %>% ntile(4) # bucket edges are rounded\ndiamonds %>% mutate(ntile_z = ntile(z,100)) %>% arrange(desc(ntile_z)) %>% tbl_df\ndiamonds %>% mutate(ntile_z = ntile(z,100)) %>% group_by(ntile_z) %>% summarise(n=n()) %>% tbl_df\n\nc(1,1,2,5,4,3,5) %>% cume_dist()\nc(1:5) %>% cume_dist()\nc(1,1:5) %>% cume_dist()\n# c(TRUE, TRUE, FALSE, FALSE, TRUE) %>% cumall()\n# c(FALSE, TRUE, FALSE, FALSE, TRUE) %>% cumany()\n# Now let's try them in the mutate function\ndiamonds %>% mutate(price_percent = cume_dist(price)) %>% arrange(desc(price_percent)) %>% tbl_df # Equivalent SQL: \n# select d.*, cume_dist() OVER (order by price) cume_dist from diamonds d order by 11 desc;\n# select d.*, cume_dist() OVER (PARTITION BY cut order by price) cume_dist from (select * from diamonds where rownum < 100) d order by cut desc, 11 desc;\n# Can also try rank(), last_value, nth_value\n\nbottom20_diamonds <- diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20) %>% arrange(desc(price_percent)) %>% tbl_df\ndiamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent >= .80) %>% arrange(desc(price_percent)) %>% tbl_df\ntop20_diamonds <- diamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent >= .80) %>% arrange(desc(price_percent)) %>% tbl_df\ndiamonds %>% mutate(price_percent = cume_dist(price)) %>% filter(price_percent <= .20 | price_percent >= .80) %>% ggplot(aes(x = price, y = carat)) + geom_point(aes(color=cut))\n\n# summarize (summarise)\ndiamonds %>% summarize(max_price = max(price)) # Equivalent SQL:select max(price) as max_price from diamonds;\ndiamonds %>% summarize(mean = mean(x), sum = sum(x,y,z), n = n())\n# Useful Summary functions:\n# min(), max() Minimum and maximum values\n# mean() Mean value\n# median() Median value\n# sum() Sum of values\n# var, sd() Variance and standard deviation of a vector\n# first() First value in a vector\n# last() Last value in a vector\n# nth() Nth value in a vector\n# n() The number of values in a vector\n# n_distinct() The number of distinct values in a vector\n\n# group_by\ndiamonds %>% group_by(cut,color) %>% summarise(n = n()) %>% arrange(n) # Equivalent SQL: select cut, color, count(*) n from diamonds group by cut, color order by n;\ndiamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n())\ndiamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% ungroup %>% summarize(sum(n))\n\ndiamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(n)\ndiamonds %>% group_by(cut,color) %>% summarise(mean = mean(x), sum = sum(x,y,z), n = n()) %>% arrange(desc(n), cut, color)\n\ndiamonds %>% group_by(cut, color, clarity) %>% summarise(mean_carat = mean(carat)) %>% ggplot(aes(x=cut, y=mean_carat, color=color)) + geom_point() + facet_wrap(~clarity)\n\n# reshaping - see 00 Overview/Overview.R\nrequire(tidyr)\ndiamonds$ID<-seq.int(nrow(diamonds))\nhead(diamonds) \nhead(diamonds) %>% select(ID, cut, color) %>% gather(variable, value, -ID) %>% tbl_df\n# head(diamonds) %>% select(ID, cut, color) %>% gather(variable, value, -ID) %>% gather(variable, value) %>% spread(variable, value) %>% tbl_df\n\n",
    "created" : 1443642061955.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2519731535",
    "id" : "95DB7AC6",
    "lastKnownWriteTime" : 1443564754,
    "path" : "~/DataVisualization/DrCannata/RWorkshop/05 Data Wrangling/Data Wrangling.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}